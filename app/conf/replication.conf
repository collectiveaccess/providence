# Location of replication log files
replication_log = <ca_base_dir>/app/log/replication.log
replication_debug_log = <ca_base_dir>/app/log/replication_debug.log

# Maximum size of a log sync "chunk" transaction (as number of log entries)
chunk_size = 100

# When "push_missing" option is set telescoping will attempt to bundle all changes
# made to a field or label over its history into a single update. This can significantly
# speed up replication, but detailed change history will not be preserved.
telescope = 0

# Maximum number of times to retry a failed media upload
max_media_upload_retries = 5

# If media upload fails after retries, abort sync?
abort_sync_on_failed_media_upload = 1

# Maximum media size to sync. Files exceeding this threshold will be skipped
# Size is in bytes 
maximum_media_size = 1gb 

sources = {
	testsource = {
		url = http://example.com/,
		service_user = service_user,
		service_key = service_password,
		#from_log_id = 14373496,
		#from_log_timestamp = 1985-01-28,
		
		filter_on_access_settings = [1]

		skipIfExpression = {
			#ca_objects = "^ca_objects.type_id =~ /image/",
		},
		
		#push_missing = 1,
		
		onlyTables = [
                ca_attributes, ca_attribute_values,
                ca_objects, ca_object_labels, ca_entities, ca_entity_labels, ca_object_lots, ca_object_lot_labels,
                ca_objects_x_entities,
                ca_object_representations, ca_object_representation_labels, ca_objects_x_object_representations,
                ca_sets, ca_set_items, ca_set_labels, ca_set_item_labels, ca_objects_x_vocabulary_terms, ca_object_lots_x_entities,
                ca_list_items, ca_lists_, ca_list_item_labels
        ],
		includeMetadata = {
                ca_objects = {
                        description= {},
                        caption= {},
                        credit_line= {},
                        dimensions_height= {},
                        dimensions_width= {},
                        dimensions_depth= {},
                        Dimensions_Length= {},
                        Dimensions_Diameter= {},
                        dim_type= {},
                        dimensions= {},
                        dimension_text= {},
                        public_title= {},
                        public_description= {},
                        public_historical_notes= {},
                        curators_comment= {},
                        medium= {},
                        date= {},
                        dates_value= {},
                        dc_dates_types = {}
                },
                ca_object_lots = {
                        credit_line = {},

                },
                ca_entities = {
                        lifetime_text = {}
                },
                ca_object_representations = {
                        photo_credit = {}
                },
                ca_sets = {
                    public_description = {}
                }
        },

		push_media = 1
	}
}

targets = {
	testtarget = {
		url = http://anotherserver.com,
		service_user = another_service_user,
		service_key = another_service_password,

		setIntrinsics = {
			# __default__ = {
# 				ca_objects = {
# 					source_id = external
# 				}
# 			},
# 			29f91051-3833-4e45-892e-7e833d9af4f0 = {
# 				ca_objects = {
# 					source_id = internal
# 				}
# 			}
		},

		#deduplicateAfterReplication = [ca_entities],
	}
}
